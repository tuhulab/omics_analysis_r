[["the-beginning-of-the-journey.html", "Chapter 2 The beginning of the journey 2.1 Day 1 2.2 Day 2 2.3 Day 3", " Chapter 2 The beginning of the journey 2.1 Day 1 2.1.1 Five steps in omics data analysis Generally speaking, I consider omics data analysis consisting of five steps: Data generation and collection. Why should we do an omics data analysis? Usually it’s not for fun, though it indeed has a lot of fun. Scientific studies usually aim to test a hypothesis, or generate new hypotheses. Usually it’s a combination of both. That is to test a hypothesis, meanwhile to generate new hypotheses. Depending on the hypothesis to test or generate, we need different data to answer. Data quality check and cleaning Data processing. Sometimes, you need Supercomputerome, such as (Computerome) Exploratory data analysis and modelling Visualization and reporting. Exercise: Find out what is Computerome Which step(s) of omics data analysis is less familiar to you, and which may be a challenge for you? 2.1.2 Getting started with R 2.1.2.1 R and RStudio 2.1.2.2 CRAN and Bioconductor R package repository. For each distribution and dependency (compatibility) management CRAN vs. Bioconductor CRAN: R core team; general purpose statistics Bioconductor: reviewed; for biology 2.1.3 Statistics 2.1.3.1 Why do we need statistics? 2.1.3.2 Classification and regression 2.2 Day 2 2.2.1 Recap What is reproducibility in omics data analysis? Which factors could affect reproducibility? R and RStudio CRAN and Bioconductor 2.2.2 R: loading a package, and get help library and package. library(gprofiler2) library(ggplot2) library(dplyr) 2.2.3 R: the basics 2.2.3.1 Arithmatic operation 2 + 3 * 5 # Note the order of operations. (2 + 3) * 5 log(10) # Natural logarithm with base e 5^2 # 5 raised to the second power 3/2 # Division sqrt(16) # Square root abs(3-7) # Absolute value of 3-7 pi # The number exp(2) # exponential function 28%%6 # Modulo Exercise: Calculate 7 plus 121 57 minus 106 18 times 35 the average of 30 and 199 the sum of 134 and 173 the difference between 100 and 81 the ratio between 121 and 176 26 multiply 144 Execute log(45) and log2(45) and compare the difference. Note: you can get help using help(log) and help(log2) A gene expression: CO (mean: 12) TRET (mean: 50) upregulated; Log2 fold change: 2.0588937 B gene expression: CO (mean: 50) TEAT (mean: 12) downregulated; Log2 fold change: -2.0588937 log computes logarithms, by default natural logarithms, log10 computes common (i.e., base 10) logarithms, and log2 computes binary (i.e., base 2) logarithms. The general form log(x, base) computes logarithms with base base. 2.2.3.2 Variable assignment # Assign the value 42 to x x &lt;- 68 # Print out the value of the variable x x # Assign the value 5 to the variable my_apples my_apples &lt;- 5 # Print out the value of the variable my_apples my_apples # Assign a value to the variables my_apples and my_oranges my_apples &lt;- 5 my_oranges &lt;- 6 # Add these two variables together my_apples + my_oranges # Create the variable my_fruit my_fruit &lt;- my_apples + my_oranges 2.2.3.3 Variable type # Change my_numeric to be 42 my_numeric &lt;- 42 # Change my_character to be &quot;universe&quot; my_character &lt;- &quot;universe&quot; # Change my_logical to be FALSE my_logical &lt;- FALSE # Check class of my_numeric class(my_numeric) # Check class of my_character class(my_character) # Check class of my_logical class(my_logical) Exercise: Test out the following code, and figure out what do they mean? logic_1 &lt;- TRUE logic_2 &lt;- &quot;TRUE&quot; logic_3 &lt;- &quot;True&quot; 2 == 3 logic_1 == logic_2 logic_2 == logic_3 logic_1 == logic_3 logic_1 == 1 1 &lt; 2 1 &gt; 2 1 == 2 1 != 2 # (not equal to) 2.2.3.4 Vector numeric_vector &lt;- c(1, 10, 49) character_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # Complete the code for boolean_vector boolean_vector &lt;-c(TRUE,FALSE,TRUE) # Poker winnings from Monday to Friday poker_vector &lt;- c(140, -50, 20, -120, 240) # Roulette winnings from Monday to Friday roulette_vector &lt;- c(-24, -50, 100, -350, 10) # Assign days as names of poker_vector names(poker_vector) &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) # Assign days as names of roulette_vector names(roulette_vector)&lt;-c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) A_vector &lt;- c(1, 2, 3) B_vector &lt;- c(4, 5, 6) # Take the sum of A_vector and B_vector total_vector &lt;- A_vector + B_vector C_vector &lt;- c(A_vector, A_vector) D_vector &lt;- c(A_vector, B_vector) A_vector * B_vector A_vector + 1 Recap variable class: numeric, character, logical 2.3 Day 3 2.3.1 Recap Read the following paragraph clipped from help(log), and reflect what does it mean? log computes logarithms, by default natural logarithms, log10 computes common (i.e., base 10) logarithms, and log2 computes binary (i.e., base 2) logarithms. The general form log(x, base) computes logarithms with base base. Assuming FLG (filaggrin, a gene coding an important skin barrier protein) has an average expression (count) of 500 in healthy control, and 200 in the disease group. How to calculate log2 fold change (log2 FC)? Think both mathematically, and in R. If FLG is downregulated in atopic dermatitis skin disease, what does it mean? What is vector recycling in R? What could be the consequence? What do these signs mean in R? != == &lt; &gt; ? &gt;= &lt;= &lt;- 2.3.2 Vector, named vector, vector comparison In an experiment, we measured 8 biomarkers and stored theirs values in two variables (CO and TRET). How can I compare these 8 biomarkers in two conditions? Use this code to generate CO and TRET n &lt;- 8 CO &lt;- round(runif(n, 0, 100)) TRET &lt;- round(runif(n, 0, 100)) names(CO) &lt;- paste(&quot;biomarker&quot;, 1: n) names(TRET) &lt;- paste(&quot;biomarker&quot;, 1: n) CO ## biomarker 1 biomarker 2 biomarker 3 biomarker 4 biomarker 5 biomarker 6 ## 16 47 86 53 40 85 ## biomarker 7 biomarker 8 ## 20 78 TRET ## biomarker 1 biomarker 2 biomarker 3 biomarker 4 biomarker 5 biomarker 6 ## 3 100 69 56 89 67 ## biomarker 7 biomarker 8 ## 11 34 2.3.3 Matrix (excerpted from (Akalin 2020)) ?matrix A matrix refers to a numeric array of rows and columns. You can think of it as a stacked version of vectors where each row or column is a vector. One of the easiest ways to create a matrix is to combine vectors of equal length using cbind(), meaning ‘column bind.’ x&lt;-c(1,2,3,4) y&lt;-c(4,5,6,7) m1&lt;-cbind(x,y);m1 ## x y ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 ## [4,] 4 7 t(m1) # transpose of m1 ## [,1] [,2] [,3] [,4] ## x 1 2 3 4 ## y 4 5 6 7 dim(m1) # 2 by 5 matrix ## [1] 4 2 You can also directly list the elements and specify the matrix: m2&lt;-matrix(c(1,3,2,5,-1,2,2,3,9),nrow=3) m2 ## [,1] [,2] [,3] ## [1,] 1 5 2 ## [2,] 3 -1 3 ## [3,] 2 2 9 Matrices and the next data structure, data frames, are tabular data structures. You can subset them using [] and providing desired rows and columns to subset. Figure ?? shows how that works conceptually. 2.3.4 Data frames (excerpted from (Akalin 2020)) A data frame is more general than a matrix, in that different columns can have different modes (numeric, character, factor, etc.). A data frame can be constructed by the data.frame() function. For example, we illustrate how to construct a data frame from genomic intervals or coordinates. chr &lt;- c(&quot;chr1&quot;, &quot;chr1&quot;, &quot;chr2&quot;, &quot;chr2&quot;) strand &lt;- c(&quot;-&quot;,&quot;-&quot;,&quot;+&quot;,&quot;+&quot;) start&lt;- c(200,4000,100,400) end&lt;-c(250,410,200,450) mydata &lt;- data.frame(chr,start,end,strand) #change column names names(mydata) &lt;- c(&quot;chr&quot;,&quot;start&quot;,&quot;end&quot;,&quot;strand&quot;) mydata # OR this will work too ## chr start end strand ## 1 chr1 200 250 - ## 2 chr1 4000 410 - ## 3 chr2 100 200 + ## 4 chr2 400 450 + mydata &lt;- data.frame(chr=chr,start=start,end=end,strand=strand) mydata ## chr start end strand ## 1 chr1 200 250 - ## 2 chr1 4000 410 - ## 3 chr2 100 200 + ## 4 chr2 400 450 + There are a variety of ways to extract the elements of a data frame. You can extract certain columns using column numbers or names, or you can extract certain rows by using row numbers. You can also extract data using logical arguments, such as extracting all rows that have a value in a column larger than your threshold. mydata[,2:4] # columns 2,3,4 of data frame ## start end strand ## 1 200 250 - ## 2 4000 410 - ## 3 100 200 + ## 4 400 450 + mydata[,c(&quot;chr&quot;,&quot;start&quot;)] # columns chr and start from data frame ## chr start ## 1 chr1 200 ## 2 chr1 4000 ## 3 chr2 100 ## 4 chr2 400 mydata$start # variable start in the data frame ## [1] 200 4000 100 400 mydata[c(1,3),] # get 1st and 3rd rows ## chr start end strand ## 1 chr1 200 250 - ## 3 chr2 100 200 + mydata[mydata$start&gt;400,] # get all rows where start&gt;400 ## chr start end strand ## 2 chr1 4000 410 - "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
